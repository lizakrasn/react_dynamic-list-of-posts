{"version":3,"sources":["components/PostsList/Post.jsx","components/shapes/postShapes.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/CommentInput.jsx","components/shapes/inputShapes.jsx","components/NewCommentForm/CommentTextarea.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","components/PostDetails/Comment.jsx","components/PostDetails/CommentsList.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Post","PropTypes","string","isRequired","number","post","selectedPost","openPost","closePost","setSelectedPost","key","id","className","userId","title","type","onClick","defaultProps","PostsList","posts","map","CommentInput","func","name","value","onChange","placeholder","event","target","required","CommentTextarea","NewCommentForm","onSubmit","useState","setName","email","setEmail","comment","setComment","preventDefault","body","BASE_URL","getUserPosts","a","fetch","response","json","data","filter","getPostDetails","postId","getPostComments","deleteComment","commentId","method","addComment","JSON","stringify","headers","Comment","onDelete","CommentsList","postComments","isCommentShown","setIsCommentShown","length","PostDetails","selectedPostId","postDetails","setPostDetails","setPostComments","useEffect","commentsPromise","fetchData","handleDeleteComment","handleAddComment","newComment","App","setPosts","selectedUserId","setSelectedUserId","filterByUser","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ade751a2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { postShapes } from '../shapes/postShapes';\n\nexport const Post = ({\n  post,\n  selectedPost,\n  openPost,\n  closePost,\n  setSelectedPost,\n}) => (\n  <li key={post.id} className=\"PostsList__item\">\n    <div>\n      <b>\n        {`[User # ${post.userId}]: ${post.title}`}\n      </b>\n    </div>\n\n    {selectedPost === post.id\n      ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            closePost(setSelectedPost);\n          }}\n        >\n          Close\n        </button>\n      )\n      : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            openPost(setSelectedPost, post.id);\n          }}\n        >\n          Open\n        </button>\n      )}\n  </li>\n);\n\nPost.defaultProps = {\n  selectedPost: null,\n};\n\nPost.propTypes = {\n  post: PropTypes.shape(postShapes).isRequired,\n  openPost: PropTypes.func.isRequired,\n  closePost: PropTypes.func.isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n  selectedPost: PropTypes.number,\n};\n","import PropTypes from 'prop-types';\n\nexport const postShapes = {\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n  id: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { Post } from './Post';\nimport { postShapes } from '../shapes/postShapes';\n\nexport const PostsList = ({\n  posts,\n  selectedPost,\n  openPost,\n  closePost,\n  setSelectedPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <Post\n          post={post}\n          selectedPost={selectedPost}\n          openPost={openPost}\n          closePost={closePost}\n          setSelectedPost={setSelectedPost}\n          key={post.id}\n        />\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.defaultProps = {\n  posts: [],\n  selectedPost: null,\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape(postShapes)),\n  selectedPost: PropTypes.number,\n  openPost: PropTypes.func.isRequired,\n  closePost: PropTypes.func.isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { inputShapes } from '../shapes/inputShapes';\n\nexport const CommentInput = ({\n  name,\n  value,\n  onChange,\n  placeholder,\n}) => (\n  <div className=\"form-field\">\n    <input\n      type=\"text\"\n      name={name}\n      value={value}\n      onChange={event => onChange(event.target.value)}\n      placeholder={placeholder}\n      className=\"NewCommentForm__input\"\n      required\n    />\n  </div>\n);\n\nCommentInput.propTypes = PropTypes.shape(inputShapes).isRequired;\n","import PropTypes from 'prop-types';\n\nexport const inputShapes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { inputShapes } from '../shapes/inputShapes';\n\nexport const CommentTextarea = ({\n  name,\n  value,\n  onChange,\n  placeholder,\n}) => (\n  <div className=\"form-field\">\n    <textarea\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={event => onChange(event.target.value)}\n      className=\"NewCommentForm__input\"\n      required\n    />\n  </div>\n);\n\nCommentTextarea.propTypes = PropTypes.shape(inputShapes).isRequired;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { CommentInput } from './CommentInput';\nimport { CommentTextarea } from './CommentTextarea';\n\nexport const NewCommentForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    const newComment = {\n      name,\n      email,\n      body: comment,\n    };\n\n    onSubmit(newComment);\n\n    setName('');\n    setEmail('');\n    setComment('');\n  }\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"NewCommentForm\"\n    >\n      <CommentInput\n        name=\"name\"\n        value={name}\n        onChange={setName}\n        placeholder=\"Your name\"\n      />\n\n      <CommentInput\n        name=\"email\"\n        value={email}\n        onChange={setEmail}\n        placeholder=\"Your email\"\n      />\n\n      <CommentTextarea\n        name=\"body\"\n        placeholder=\"Type comment here\"\n        value={comment}\n        onChange={setComment}\n      />\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport async function getAllPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return (await response.json()).data;\n}\n\nexport async function getUserPosts(userId) {\n  const response = await fetch(`${BASE_URL}/posts`);\n  const posts = (await response.json()).data;\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n}\n\nexport async function getPostDetails(postId) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return (await response.json()).data;\n}\n\nexport async function getPostComments(postId) {\n  const response = await fetch(`${BASE_URL}/comments`);\n  const { data } = await response.json();\n\n  return data.filter(comment => comment.postId === postId);\n}\n\nexport async function deleteComment(commentId) {\n  await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport async function addComment(comment) {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({ comment, onDelete }) => (\n  <li key={comment.id} className=\"PostDetails__list-item\">\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => onDelete(comment.id)}\n    >\n      X\n    </button>\n    <p>{comment.body}</p>\n  </li>\n);\n\nComment.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment } from './Comment';\n\nexport const CommentsList = ({ postComments, deleteComment }) => {\n  const [isCommentShown, setIsCommentShown] = useState(false);\n\n  if (postComments.length === 0) {\n    return <p>No comments</p>;\n  }\n\n  return (\n    <section className=\"PostDetails__comments\">\n      {isCommentShown\n        ? (\n          <div>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsCommentShown(false)}\n            >\n              {`Hide ${postComments.length} comment(s)`}\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {postComments.map(comment => (\n                <Comment comment={comment} onDelete={deleteComment} />\n              ))}\n            </ul>\n          </div>\n        )\n        : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsCommentShown(true)}\n          >\n            {`Open ${postComments.length} comment(s)`}\n          </button>\n        )\n      }\n    </section>\n  );\n};\n\nCommentsList.defaultProps = {\n  postComments: [],\n};\n\nCommentsList.propTypes = {\n  postComments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    postId: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  })),\n  deleteComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  getPostDetails,\n  getPostComments,\n  deleteComment,\n  addComment,\n} from '../../api/api';\nimport { CommentsList } from './CommentsList';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState(null);\n  const [postComments, setPostComments] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      setPostComments([]);\n      const commentsPromise = getPostComments(selectedPostId);\n\n      setPostDetails(await getPostDetails(selectedPostId));\n      setPostComments(await commentsPromise);\n    };\n\n    fetchData();\n  }, [selectedPostId]);\n\n  const handleDeleteComment = async(commentId) => {\n    await deleteComment(commentId);\n    setPostComments(await getPostComments(selectedPostId));\n  };\n\n  const handleAddComment = async(comment) => {\n    const newComment = {\n      ...comment, postId: selectedPostId,\n    };\n\n    await addComment(newComment);\n    setPostComments(await getPostComments(selectedPostId));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails ? postDetails.body : 'Loading...'}</p>\n      </section>\n\n      <CommentsList\n        postComments={postComments}\n        deleteComment={handleDeleteComment}\n      />\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onSubmit={handleAddComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/api';\n\nfunction openPost(setSelectedPost, postId) {\n  setSelectedPost(postId);\n}\n\nfunction closePost(setSelectedPost) {\n  setSelectedPost(null);\n}\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      setPosts(await getUserPosts(selectedUserId));\n    };\n\n    fetchData();\n  }, [selectedUserId]);\n\n  const filterByUser = useCallback(\n    event => setSelectedUserId(+event.target.value),\n    [],\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            onChange={filterByUser}\n            className=\"App__user-selector\"\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPost={selectedPost}\n            openPost={openPost}\n            closePost={closePost}\n            setSelectedPost={setSelectedPost}\n          />\n        </div>\n\n        {selectedPost\n          && (\n            <div className=\"App__content\">\n              <PostDetails selectedPostId={selectedPost} />\n            </div>\n          )\n        }\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}